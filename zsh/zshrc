# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(
  git
  zsh-autosuggestions
  docker-compose
  zsh-syntax-highlighting
  history-substring-search
  command-not-found
  copypath
  copyfile
  dircycle
  vi-mode
  jira
)

ENABLE_CORRECTION="true"

source $ZSH/oh-my-zsh.sh

if [[ -r ~/.phpbrew/bashrc ]]; then
  source ~/.phpbrew/bashrc
fi

alias n='nvim'
alias m='neomutt'
alias dc='docker compose'
alias install='sudo pacman -S'
alias search='sudo pacman -Ss'
alias remove='sudo pacman -R'
alias update='sudo pacman -Sy'
alias yinstall='yay -S'
alias ysearch='yay -Ss'
alias yremove='yay -R'
alias yupdate='yay -Sy'
alias l="ls -l"
alias c="clear"
alias code="cd ~/code"
alias lg="lazygit"
alias resetbg="colors"
alias togglebg="colors toggle"
alias cdroot='cd $(git rev-parse --show-toplevel)'
alias ggf=ggfl
alias cpuavailablemodes='cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_available_governors'
alias cpucurrentmode='cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias cpusetperformance='echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias cpusetpowersave='echo powersave | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'

export PATH=$PATH:/usr/local/go/bin:~/go/bin:~/.local/bin:~/.cargo/bin:~/.local/share/bob/nvim-bin:~/.local/share/neovim/bin:/home/kristijan/.meteor:~/.yarn/bin:~/.luarocks/bin:~/.config/composer/vendor/bin
export LESS=R
export EDITOR=nvim
export MANPAGER="nvim +Man!"
export FZF_DEFAULT_COMMAND='fd --type f --follow'
export LESS=R
export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="fg=magenta,bold,underline"
export GOPATH=$HOME/go
setopt HIST_IGNORE_ALL_DUPS

# use ctrl+t to toggle autosuggestions(hopefully this wont be needed as
# zsh-autosuggestions is designed to be unobtrusive)
NVIM_BG=${NVIM_COLORSCHEME_BG:-'light'}
export BAT_THEME="ansi"
export KEYTIMEOUT=1
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=248'

[ -f ~/.zsh_secret ] && source ~/.zsh_secret

eval "$(fnm env)"

eval $(keychain --eval --quiet ~/.ssh/id_rsa)

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    alias nvim=nvr -cc split --remote-wait +'set bufhidden=wipe'
fi

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
else
    export EDITOR="nvim"
fi

bindkey '^[[Z' reverse-menu-complete # Use shift tab for backward autocompletion

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

### Bind up and down keys for history-substring-search plugin
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^k' history-substring-search-up
bindkey '^j' history-substring-search-down

### Fix slowness of pastes with zsh-syntax-highlighting.zsh
### Source: https://gist.github.com/magicdude4eva/2d4748f8ef3e6bf7b1591964c201c1ab
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish
### Fix slowness of pastes

### Custom FZF functions
### @see: https://github.com/junegunn/fzf/wiki/examples
# Open link from Chrome history
chr() {
  local cols sep google_history
  cols=$(( COLUMNS / 3 ))
  sep='{::}'
  google_history="$HOME/.config/google-chrome/Default/History"

  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open > /dev/null 2> /dev/null
}

# fbr - checkout git branch (including remote branches)
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fst() {
  local files file
  files=$(git status --porcelain -u) &&
  file=$(echo "$files" |
           fzf -d $(( 2 + $(wc -l <<< "$files") )) +m) &&
  nvim $(echo $file | sed "s/^...//")
}

colors() {
  color_vars=$(~/neovim-config/colors $1)
  eval ${color_vars}
}

git_patch() {
  xclip -selection clipboard -o|git apply --ignore-whitespace
}

nt() {
  nvim -c "autocmd BufEnter * only" -c "lua require('orgmode').capture:open_template_by_shortcut('r')"
}

remove_gone_branches() {
  git fetch -p && for branch in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do git branch -D $branch; done
}

eval "$(zoxide init zsh --no-cmd)"

z() {
  if [ $# -gt 0 ]; then
    __zoxide_z "$*"
  else
    __zoxide_zi
  fi
}

zi() {
  __zoxide_zi "$*"
}

[[ $- == *i* ]] && source "/usr/share/fzf/completion.zsh" 2> /dev/null
source "/usr/share/fzf/key-bindings.zsh"

source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.p10k.zsh
